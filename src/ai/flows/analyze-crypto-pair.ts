// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Analyzes a cryptocurrency pair using technical indicators and Gemini AI for trend predictions and recommendations.
 *
 * - analyzeCryptoPair - A function that initiates the cryptocurrency pair analysis.
 * - AnalyzeCryptoPairInput - The input type for the analyzeCryptoPair function.
 * - AnalyzeCryptoPairOutput - The return type for the analyzeCryptoPair function.
 */

import {ai} from '@/ai/genkit';
import { AnalyzeCryptoPairInputSchema, type AnalyzeCryptoPairInput, AnalyzeCryptoPairOutputSchema, type AnalyzeCryptoPairOutput } from '@/lib/types';


export async function analyzeCryptoPair(input: AnalyzeCryptoPairInput): Promise<AnalyzeCryptoPairOutput> {
  return analyzeCryptoPairFlow(input);
}

const analyzeCryptoPairPrompt = ai.definePrompt({
  name: 'analyzeCryptoPairPrompt',
  input: {schema: AnalyzeCryptoPairInputSchema},
  output: {schema: AnalyzeCryptoPairOutputSchema},
  prompt: `B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch k·ªπ thu·∫≠t th·ªã tr∆∞·ªùng ti·ªÅn m√£ h√≥a. D·ª±a v√†o d·ªØ li·ªáu ƒë·∫ßu v√†o cho c·∫∑p {{{pair}}} tr√™n khung th·ªùi gian {{{timeframe}}}, h√£y th·ª±c hi·ªán m·ªôt ph√¢n t√≠ch chi ti·∫øt.

**D·ªØ li·ªáu ƒë·∫ßu v√†o:**
- Gi√° hi·ªán t·∫°i: {{{price}}}
- Gi√° cao nh·∫•t: {{{high}}}
- Gi√° th·∫•p nh·∫•t: {{{low}}}
- **RSI (14):** {{{rsi}}}
- **MACD (12, 26, 9):**
    - ƒê∆∞·ªùng MACD: {{{macd.line}}}
    - ƒê∆∞·ªùng t√≠n hi·ªáu: {{{macd.signal}}}
- **EMA:**
    - EMA 9: {{{ema.ema9}}}
    - EMA 21: {{{ema.ema21}}}

**Th·ª±c hi·ªán ph√¢n t√≠ch theo c√°c b∆∞·ªõc sau:**

1.  **ƒê√°nh gi√° t·ªïng quan xu h∆∞·ªõng:**
    - Xu h∆∞·ªõng d·ª±a tr√™n v·ªã tr√≠ c·ªßa gi√° so v·ªõi EMA 9 v√† EMA 21.
    - Xu h∆∞·ªõng d·ª±a tr√™n s·ª± giao c·∫Øt c·ªßa hai ƒë∆∞·ªùng EMA.
    - Xu h∆∞·ªõng d·ª±a tr√™n MACD (v·ªã tr√≠ so v·ªõi ƒë∆∞·ªùng zero, s·ª± giao c·∫Øt gi·ªØa ƒë∆∞·ªùng MACD v√† ƒë∆∞·ªùng t√≠n hi·ªáu).
    - S·ª©c m·∫°nh c·ªßa xu h∆∞·ªõng d·ª±a tr√™n RSI.
    - K·∫øt h·ª£p t·∫•t c·∫£ ƒë·ªÉ ƒë∆∞a ra ƒë√°nh gi√° chung (TƒÉng gi√°, Gi·∫£m gi√°, ƒêi ngang).

2.  **Gi·∫£i th√≠ch c√°c ch·ªâ b√°o:**
    - üìà **EMA:** Gi√° ƒëang ·ªü tr√™n hay d∆∞·ªõi c√°c ƒë∆∞·ªùng EMA? C√≥ giao c·∫Øt v√†ng (EMA ng·∫Øn c·∫Øt l√™n tr√™n EMA d√†i) hay giao c·∫Øt t·ª≠ th·∫ßn (EMA ng·∫Øn c·∫Øt xu·ªëng d∆∞·ªõi EMA d√†i) kh√¥ng?
    - üìä **MACD:** Bi·ªÉu ƒë·ªì histogram l√† d∆∞∆°ng hay √¢m? ƒê∆∞·ªùng MACD ƒëang c·∫Øt l√™n hay c·∫Øt xu·ªëng ƒë∆∞·ªùng t√≠n hi·ªáu? T√≠n hi·ªáu n√†y m·∫°nh hay y·∫øu?
    - üìâ **RSI:** RSI ƒëang ·ªü v√πng n√†o (qu√° mua > 70, qu√° b√°n < 30, hay trung t√≠nh)? N√≥ ƒëang c√≥ xu h∆∞·ªõng tƒÉng hay gi·∫£m?

3.  **K·∫øt lu·∫≠n v√† T√≠n hi·ªáu Giao d·ªãch:**
    - D·ª±a tr√™n ph√¢n t√≠ch t·ªïng h·ª£p, ƒë∆∞a ra k·∫øt lu·∫≠n cu·ªëi c√πng: **MUA**, **B√ÅN**, ho·∫∑c **GI·ªÆ**.

4.  **K·∫ø ho·∫°ch Giao d·ªãch ƒê·ªÅ xu·∫•t:**
    - **Gi√° v√†o l·ªánh:** ƒê·ªÅ xu·∫•t m·ªôt kho·∫£ng gi√° h·ª£p l√Ω ƒë·ªÉ v√†o l·ªánh.
    - **D·ª´ng l·ªó:** ƒê·ªÅ xu·∫•t m·ªôt m·ª©c d·ª´ng l·ªó ƒë·ªÉ b·∫£o v·ªá v·ªën, th∆∞·ªùng l√† d∆∞·ªõi m·ªôt m·ª©c h·ªó tr·ª£ g·∫ßn ƒë√¢y (cho l·ªánh Mua) ho·∫∑c tr√™n m·ªôt m·ª©c kh√°ng c·ª± g·∫ßn ƒë√¢y (cho l·ªánh B√°n).
    - **Ch·ªët l·ªùi:** ƒê·ªÅ xu·∫•t c√°c m·ª©c ch·ªët l·ªùi ti·ªÅm nƒÉng, th∆∞·ªùng l√† c√°c m·ª©c kh√°ng c·ª± ti·∫øp theo (cho l·ªánh Mua) ho·∫∑c c√°c m·ª©c h·ªó tr·ª£ (cho l·ªánh B√°n).

5.  **Qu·∫£n l√Ω r·ªßi ro:**
    - Cung c·∫•p m·ªôt l·ªùi khuy√™n ng·∫Øn g·ªçn, s√∫c t√≠ch v·ªÅ qu·∫£n l√Ω r·ªßi ro cho giao d·ªãch n√†y.

**Y√™u c·∫ßu:** Tr·∫£ v·ªÅ k·∫øt qu·∫£ b·∫±ng ti·∫øng Vi·ªát, tr√¨nh b√†y r√µ r√†ng, d·ªÖ hi·ªÉu. S·ª≠ d·ª•ng c√°c g·∫°ch ƒë·∫ßu d√≤ng ho·∫∑c bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c ƒë·ªÉ l√†m n·ªïi b·∫≠t c√°c ƒëi·ªÉm ch√≠nh.`,
});

const analyzeCryptoPairFlow = ai.defineFlow(
  {
    name: 'analyzeCryptoPairFlow',
    inputSchema: AnalyzeCryptoPairInputSchema,
    outputSchema: AnalyzeCryptoPairOutputSchema,
  },
  async input => {
    const {output} = await analyzeCryptoPairPrompt(input);
    return output!;
  }
);
